// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "level.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pang {
namespace level {

namespace {

const ::google::protobuf::Descriptor* Level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_level_2eproto() {
  protobuf_AddDesc_level_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "level.proto");
  GOOGLE_CHECK(file != NULL);
  Level_descriptor_ = file->message_type(0);
  static const int Level_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, num_rooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, min_room_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, max_room_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, min_room_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, max_room_height_),
  };
  Level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_descriptor_,
      Level::default_instance_,
      Level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_level_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_descriptor_, &Level::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_level_2eproto() {
  delete Level::default_instance_;
  delete Level_reflection_;
}

void protobuf_AddDesc_level_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013level.proto\022\npang.level\"\315\001\n\005Level\022\022\n\004s"
    "eed\030\001 \001(\005:\0041337\022\022\n\005width\030\002 \001(\005:\003100\022\023\n\006h"
    "eight\030\003 \001(\005:\003100\022\025\n\tnum_rooms\030\004 \001(\005:\00210\022"
    "\032\n\016min_room_width\030\005 \001(\005:\00210\022\032\n\016max_room_"
    "width\030\006 \001(\005:\00220\022\033\n\017min_room_height\030\007 \001(\005"
    ":\00210\022\033\n\017max_room_height\030\010 \001(\005:\00220", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "level.proto", &protobuf_RegisterTypes);
  Level::default_instance_ = new Level();
  Level::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_level_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_level_2eproto {
  StaticDescriptorInitializer_level_2eproto() {
    protobuf_AddDesc_level_2eproto();
  }
} static_descriptor_initializer_level_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Level::kSeedFieldNumber;
const int Level::kWidthFieldNumber;
const int Level::kHeightFieldNumber;
const int Level::kNumRoomsFieldNumber;
const int Level::kMinRoomWidthFieldNumber;
const int Level::kMaxRoomWidthFieldNumber;
const int Level::kMinRoomHeightFieldNumber;
const int Level::kMaxRoomHeightFieldNumber;
#endif  // !_MSC_VER

Level::Level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level::InitAsDefaultInstance() {
}

Level::Level(const Level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level::SharedCtor() {
  _cached_size_ = 0;
  seed_ = 1337;
  width_ = 100;
  height_ = 100;
  num_rooms_ = 10;
  min_room_width_ = 10;
  max_room_width_ = 20;
  min_room_height_ = 10;
  max_room_height_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level::~Level() {
  SharedDtor();
}

void Level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_descriptor_;
}

const Level& Level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_2eproto();
  return *default_instance_;
}

Level* Level::default_instance_ = NULL;

Level* Level::New() const {
  return new Level;
}

void Level::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seed_ = 1337;
    width_ = 100;
    height_ = 100;
    num_rooms_ = 10;
    min_room_width_ = 10;
    max_room_width_ = 20;
    min_room_height_ = 10;
    max_room_height_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seed = 1 [default = 1337];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 100];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_rooms;
        break;
      }

      // optional int32 num_rooms = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rooms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rooms_)));
          set_has_num_rooms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_room_width;
        break;
      }

      // optional int32 min_room_width = 5 [default = 10];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_room_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_room_width_)));
          set_has_min_room_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_room_width;
        break;
      }

      // optional int32 max_room_width = 6 [default = 20];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_room_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_room_width_)));
          set_has_max_room_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_min_room_height;
        break;
      }

      // optional int32 min_room_height = 7 [default = 10];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_room_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_room_height_)));
          set_has_min_room_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_room_height;
        break;
      }

      // optional int32 max_room_height = 8 [default = 20];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_room_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_room_height_)));
          set_has_max_room_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seed = 1 [default = 1337];
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seed(), output);
  }

  // optional int32 width = 2 [default = 100];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3 [default = 100];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 num_rooms = 4 [default = 10];
  if (has_num_rooms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_rooms(), output);
  }

  // optional int32 min_room_width = 5 [default = 10];
  if (has_min_room_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_room_width(), output);
  }

  // optional int32 max_room_width = 6 [default = 20];
  if (has_max_room_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_room_width(), output);
  }

  // optional int32 min_room_height = 7 [default = 10];
  if (has_min_room_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_room_height(), output);
  }

  // optional int32 max_room_height = 8 [default = 20];
  if (has_max_room_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_room_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seed = 1 [default = 1337];
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seed(), target);
  }

  // optional int32 width = 2 [default = 100];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3 [default = 100];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 num_rooms = 4 [default = 10];
  if (has_num_rooms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_rooms(), target);
  }

  // optional int32 min_room_width = 5 [default = 10];
  if (has_min_room_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_room_width(), target);
  }

  // optional int32 max_room_width = 6 [default = 20];
  if (has_max_room_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_room_width(), target);
  }

  // optional int32 min_room_height = 7 [default = 10];
  if (has_min_room_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_room_height(), target);
  }

  // optional int32 max_room_height = 8 [default = 20];
  if (has_max_room_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_room_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seed = 1 [default = 1337];
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

    // optional int32 width = 2 [default = 100];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3 [default = 100];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 num_rooms = 4 [default = 10];
    if (has_num_rooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rooms());
    }

    // optional int32 min_room_width = 5 [default = 10];
    if (has_min_room_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_room_width());
    }

    // optional int32 max_room_width = 6 [default = 20];
    if (has_max_room_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_room_width());
    }

    // optional int32 min_room_height = 7 [default = 10];
    if (has_min_room_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_room_height());
    }

    // optional int32 max_room_height = 8 [default = 20];
    if (has_max_room_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_room_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_num_rooms()) {
      set_num_rooms(from.num_rooms());
    }
    if (from.has_min_room_width()) {
      set_min_room_width(from.min_room_width());
    }
    if (from.has_max_room_width()) {
      set_max_room_width(from.max_room_width());
    }
    if (from.has_min_room_height()) {
      set_min_room_height(from.min_room_height());
    }
    if (from.has_max_room_height()) {
      set_max_room_height(from.max_room_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {

  return true;
}

void Level::Swap(Level* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(num_rooms_, other->num_rooms_);
    std::swap(min_room_width_, other->min_room_width_);
    std::swap(max_room_width_, other->max_room_width_);
    std::swap(min_room_height_, other->min_room_height_);
    std::swap(max_room_height_, other->max_room_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_descriptor_;
  metadata.reflection = Level_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace level
}  // namespace pang

// @@protoc_insertion_point(global_scope)
